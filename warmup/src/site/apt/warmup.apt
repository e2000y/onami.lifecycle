                                    ------
                                    Home
                                    ------
                                    The Apache Onami developers team
                                    ------
                                     2012

~~
~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.
~~

User's Guide

 To use, install the WarmUpModule in your Guice injector. To initiate the warm up, get the warm up stager and
 call the stage() method.

+--------------------------------------+
Injector injector = Guice.createInjector( new WarmUpModule() );
// ...
Stager<WarmUp> warmUpStager = injector.get( LifeCycleStageModule.key( WarmUp.class ) );
warmUpStager.stage(); // causes all injected object's @WarmUp methods to get called
+--------------------------------------+

 Of course, instead of getting the stager from the injector you can declare it as a dependency:

+--------------------------------------+
public class MyClass
{
    private final Stager<WarmUp> stager;

    @Inject
    public MyClass( Stager<WarmUp> stager )
    {
        this.stager = stager;
    }

    @PostConstruct
    public void start()
    {
        stager.stage();
    }
}
+--------------------------------------+
